# Triton server parameters
#   width of MIG slice (e.g. "1" for 1g-10gb, "2" for 2g-20gb, etc.)
# gpuWidth: 1
gpuRequest: nvidia.com/mig-1g.5gb

# location for models
modelRepo: /depot/cms/purdue-af/triton/models
# modelRepo: s3://https://s3-prod.geddes.rcac.purdue.edu:443/triton-models
#s3://https://minio-api.mysite.edu:443/triton-models

# how often to poll for models (seconds)
modelPollInterval: 60

image:
  # repository: nvcr.io/nvidia/tritonserver
  # tag: 22.08-py3
  repository: fastml/triton-torchgeo
  tag: 22.07-py3-geometric
  pullPolicy: IfNotPresent

# host: hostname (external to cluster)
host: triton-passthrough.cms-dev.geddes.rcac.purdue.edu

# metrics: hostname for metrics endpoint (for gathering externally)
metrics:
  #hostname: triton-metrics.127.0.0.1.nip.io
  hostname: triton-metrics.cms-dev.geddes.rcac.purdue.edu

# S3 access/secret keys if modelrepo is an s3 endpoint
awsAccessKey: 
awsSecretKey: 
awsK8sSecretName: s3-credentials
awsDefaultRegion: us-east-1

# pytorch inference tuning - for experts only!
#pyTorchCudaAllocConf: "max_split_size_mb:512,garbage_collection_threshold:0.7"


# min and max number of servers to scale out to
minReplicas: 1
maxReplicas: 4
scalingThreshold: 400
scalingMetric: "max(avg by (model) (delta(nv_inference_queue_duration_us[30s])/(1000 * (1 + delta(nv_inference_request_success[30s])))))"

# prometheus endpoint where scalingMetric can be queried
prometheusAddress: prometheus-service.cms-dev.geddes.rcac.purdue.edu:9090

# nginx configuration to forward requests to triton
#   note that locations have the form {{ .Release.name }}-triton hardcoded; below configuration
#   should work out-of-the-box if the release name is "triton"
#   also, you should specify a TLS secret in the extraVolumes section

nginx:
  image:
    debug: true
  serverBlock: |-
    # server {
    #   listen       9001 ssl http2;
    #   server_name  my-triton-server.mysite.edu;
    
    #   ssl_certificate /etc/ssl/private/tls.crt;
    #   ssl_certificate_key /etc/ssl/private/tls.key;
    #   ssl_verify_client off;
    #   ssl_protocols TLSv1.2;
    #   location / {
    #     grpc_pass grpc://triton-triton:8001;
    #   }
    # }
    server {
      listen       8001 http2;
      location / {
        grpc_pass grpc://triton-triton:8001;
      }
    }
    server {
      listen       8002;
      location / {
        proxy_pass http://triton-triton:8002;
      }
    }

    
  # extraVolumeMounts:
  #   - name: certs
  #     mountPath: /etc/ssl/private
  # extraVolumes:
  #   - name: certs
  #     secret:
  #       secretName: my-tls-secret
  # service:
  #   type: ClusterIP
  #   port: 9001
  #   targetPort:
  #     http: 9001

  ingress:
    enabled:
      true
    #hostname: triton-grpc.131.225.163.60.nip.io
    hostname: triton-grpc.cms-dev.geddes.rcac.purdue.edu
    extraPaths:
    - path: ''
      pathType: ImplementationSpecific
      backend:
        service:
          name: triton-nginx
          port:
            number: 8001


  
