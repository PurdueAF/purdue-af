apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "triton.fullname" . }}
  labels:
    {{- include "triton.labels" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: {{ default 1 .Values.minReplicas }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: {{ .Release.Name }}-triton
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-triton
    spec:
      tolerations:
        - key: hub.jupyter.org/dedicated
          operator: Equal
          value: cms-af
          effect: NoSchedule
        # - key: "gpu"
        #   value: "true"

      containers:
      # - name: {{ .Chart.Name }}-sdk
      #   image: harbor.apps.okddev.fnal.gov/nv/nvidia/tritonserver:21.07-py3-sdk
      #   imagePullPolicy: IfNotPresent
      #   command:
      #     - "sleep"
      #     - "3600"
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        readinessProbe:
          httpGet:
            path: v2/health/ready
            port: 8000
          initialDelaySeconds: 10
          
        ports:
        - containerPort: 8000
        - containerPort: 8001
        - containerPort: 8002

        resources:
          requests:
            cpu: 4000m
            memory: 4Gi
            "{{ .Values.gpuRequest }}" : "1"
          limits:
            cpu: 4000m
            memory: 4Gi
            "{{ .Values.gpuRequest }}" : "1"
        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
          - mountPath: /depot/cms
            name: depot
        command:
          - bash
        args:
          - -c
          - tritonserver --model-control-mode=poll --repository-poll-secs={{ .Values.modelPollInterval }} --log-verbose 1 --exit-on-error=false --model-repository={{ .Values.modelRepo }}
        env:
          # - name: AWS_ACCESS_KEY_ID
          #   valueFrom:
          #     secretKeyRef:
          #       name: {{ .Values.awsK8sSecretName }}
          #       key: S3_ACCESS_KEY_ID
          # - name: AWS_SECRET_ACCESS_KEY
          #   valueFrom:
          #     secretKeyRef:
          #       name: {{ .Values.awsK8sSecretName }}
          #       key: S3_SECRET_KEY
          # - name: AWS_DEFAULT_REGION
          #   value: {{ .Values.awsDefaultRegion }}
          # {{ if .Values.pyTorchCudaAllocConf }}
          - name: PYTORCH_CUDA_ALLOC_CONF
            value: {{ .Values.pyTorchCudaAllocConf }}
          {{ end }}
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: depot
          nfs:
            server: datadepot.rcac.purdue.edu
            path: /depot/cms
