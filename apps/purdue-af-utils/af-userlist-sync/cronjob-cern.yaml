apiVersion: batch/v1
kind: CronJob
metadata:
  name: af-userlist-sync-cern
  namespace: cms
spec:
  schedule: "*/30 * * * *" # Run every 30 minutes
  suspend: true
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: af-userlist-sync
          restartPolicy: Never
          nodeSelector: { "cms-af-prod": "true" }
          tolerations:
            - key: "hub.jupyter.org/dedicated"
              operator: "Equal"
              value: "cms-af"
              effect: "NoSchedule"
          containers:
            - name: af-userlist-sync-cern
              image: rockylinux:8.9
              command:
                - /bin/bash
                - -c
                - |
                  SECRET_NAME=af-auth-cern
                  TMP_FILE=/tmp/cern-auth.txt

                  dnf install -y curl wget libxml2 jq --nogpgcheck

                  # Install kubectl directly from binary
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x kubectl
                  mv kubectl /usr/local/bin/

                  # Get CERN CMS users
                  echo "Fetching CERN CMS users..."
                  curl -k \
                    --cert /etc/grid-security-ro/x509up \
                    --key /etc/grid-security-ro/x509up \
                    "https://cms-cric.cern.ch/api/accounts/user/query/?json" \
                    -o /tmp/cern-users.json

                  # Parse JSON to extract DNs and filter for CERN internal users
                  # Extract usernames from DNs using the same method as the original VOMS approach
                  cat /tmp/cern-users.json | jq -r '.[] | .profiles[] | .dn | select(. != null)' | \
                    grep "/OU=Users/" | \
                    sed -n 's/.*\/OU=Users\/CN=\([^\/]*\)\/CN=.*/\1/p' | \
                    sort | uniq > $TMP_FILE

                  # echo "CERN users:"
                  # cat $TMP_FILE

                  # Validate the data before updating secret
                  if [ -s $TMP_FILE ]; then
                    USER_COUNT=$(wc -l < $TMP_FILE)
                    echo "Found $USER_COUNT users"
                    
                    if [ $USER_COUNT -lt 200 ]; then
                      echo "ERROR: Only $USER_COUNT users found - this seems too low for CERN LDAP"
                      echo "This might indicate a problem with the LDAP query or server"
                      echo "Job will fail to prevent data loss"
                      exit 1
                    fi
                    
                    # Validate that each line looks like a valid username (no spaces, reasonable length)
                    if grep -q " " $TMP_FILE || grep -q "^$" $TMP_FILE; then
                      echo "ERROR: Invalid data format detected in user list"
                      echo "Job will fail to prevent data loss"
                      exit 1
                    fi
                    
                    echo "CERN users list validation passed, updating $SECRET_NAME secret..."
                    
                    # Check if secret already exists
                    if kubectl get secret $SECRET_NAME >/dev/null 2>&1; then
                      echo "Secret exists, updating it..."
                      
                      # Get existing users for comparison
                      kubectl get secret $SECRET_NAME -o jsonpath='{.data.userlist}' | base64 -d > /tmp/existing-users.txt
                      
                      # Show differences
                      echo "=== User List Changes ==="
                      
                      # Find added users (in new list but not in old list)
                      comm -13 <(sort /tmp/existing-users.txt) <(sort $TMP_FILE) > /tmp/added-users.txt
                      if [ -s /tmp/added-users.txt ]; then
                        echo "Added users:"
                        cat /tmp/added-users.txt
                      else
                        echo "No new users added"
                      fi
                      
                      # Find removed users (in old list but not in new list)
                      comm -23 <(sort /tmp/existing-users.txt) <(sort $TMP_FILE) > /tmp/removed-users.txt
                      if [ -s /tmp/removed-users.txt ]; then
                        echo "Removed users:"
                        cat /tmp/removed-users.txt
                      else
                        echo "No users removed"
                      fi
                      
                      echo "========================"
                      
                      # Update existing secret
                      if ! kubectl patch secret $SECRET_NAME \
                        --type='merge' \
                        -p="{\"data\":{\"userlist\":\"$(base64 -w0 $TMP_FILE)\"}}"; then
                        echo "ERROR: Failed to update secret"
                        exit 1
                      fi
                    else
                      echo "Secret does not exist, creating it..."
                      echo "=== User List Changes ==="
                      echo "Initial user list created with $USER_COUNT users"
                      echo "========================"
                      
                      # Create new secret
                      if ! kubectl create secret generic $SECRET_NAME \
                        --from-file=userlist=$TMP_FILE; then
                        echo "ERROR: Failed to create secret"
                        exit 1
                      fi
                    fi
                  else
                    echo "ERROR: CERN users list is empty - this indicates a problem with LDAP connection or data retrieval"
                    echo "Job will fail to prevent data loss"
                    exit 1
                  fi

              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "500m"
              volumeMounts:
                - name: x509-proxy
                  mountPath: /etc/grid-security-ro
                  readOnly: true
          volumes:
            - name: x509-proxy
              secret:
                secretName: x509-proxy
