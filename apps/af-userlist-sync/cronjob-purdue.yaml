apiVersion: batch/v1
kind: CronJob
metadata:
  name: af-userlist-sync-purdue
  namespace: cms
spec:
  schedule: "*/10 * * * *"  # Run every 10 minutes
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: af-userlist-sync
          restartPolicy: Never
          containers:
          - name: af-userlist-sync-purdue
            image: rockylinux:8.9
            command:
            - /bin/bash
            - -c
            - |
              SECRET_NAME=purdue-auth

              dnf install -y openldap-clients curl --nogpgcheck
              
              # Install kubectl directly from binary
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/
              
              # Get Purdue users
              echo "Fetching Purdue users..."
              ldapsearch -x host=hammer.rcac.purdue.edu | grep uid: | cut -d " " -f2 > /tmp/purdue-auth.txt
              # echo "Purdue users:"
              # cat /tmp/purdue-auth.txt
              
              # Validate the data before updating secret
              if [ -s /tmp/purdue-auth.txt ]; then
                USER_COUNT=$(wc -l < /tmp/purdue-auth.txt)
                echo "Found $USER_COUNT users"
                
                if [ $USER_COUNT -lt 200 ]; then
                  echo "ERROR: Only $USER_COUNT users found - this seems too low for Purdue LDAP"
                  echo "This might indicate a problem with the LDAP query or server"
                  echo "Job will fail to prevent data loss"
                  exit 1
                fi
                
                # Validate that each line looks like a valid username (no spaces, reasonable length)
                if grep -q " " /tmp/purdue-auth.txt || grep -q "^$" /tmp/purdue-auth.txt; then
                  echo "ERROR: Invalid data format detected in user list"
                  echo "Job will fail to prevent data loss"
                  exit 1
                fi
                
                echo "Purdue users list validation passed, updating $SECRET_NAME secret..."
                
                # Check if secret already exists
                if kubectl get secret $SECRET_NAME >/dev/null 2>&1; then
                  echo "Secret exists, updating it..."
                  
                  # Get existing users for comparison
                  kubectl get secret $SECRET_NAME -o jsonpath='{.data.purdue-users}' | base64 -d > /tmp/existing-users.txt
                  
                  # Show differences
                  echo "=== User List Changes ==="
                  
                  # Find added users (in new list but not in old list)
                  comm -13 <(sort /tmp/existing-users.txt) <(sort /tmp/purdue-auth.txt) > /tmp/added-users.txt
                  if [ -s /tmp/added-users.txt ]; then
                    echo "Added users:"
                    cat /tmp/added-users.txt
                  else
                    echo "No new users added"
                  fi
                  
                  # Find removed users (in old list but not in new list)
                  comm -23 <(sort /tmp/existing-users.txt) <(sort /tmp/purdue-auth.txt) > /tmp/removed-users.txt
                  if [ -s /tmp/removed-users.txt ]; then
                    echo "Removed users:"
                    cat /tmp/removed-users.txt
                  else
                    echo "No users removed"
                  fi
                  
                  echo "========================"
                  
                  # Update existing secret
                  if ! kubectl patch secret $SECRET_NAME \
                    --type='merge' \
                    -p="{\"data\":{\"purdue-users\":\"$(base64 -w0 /tmp/purdue-auth.txt)\"}}"; then
                    echo "ERROR: Failed to update secret"
                    exit 1
                  fi
                else
                  echo "Secret does not exist, creating it..."
                  echo "=== User List Changes ==="
                  echo "Initial user list created with $USER_COUNT users"
                  echo "========================"
                  
                  # Create new secret
                  if ! kubectl create secret generic $SECRET_NAME \
                    --from-file=purdue-users=/tmp/purdue-auth.txt; then
                    echo "ERROR: Failed to create secret"
                    exit 1
                  fi
                fi
              else
                echo "ERROR: Purdue users list is empty - this indicates a problem with LDAP connection or data retrieval"
                echo "Job will fail to prevent data loss"
                exit 1
              fi

            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
            volumeMounts:
            - name: ldap-conf
              mountPath: /etc/openldap/ldap.conf
              subPath: ldap.conf

          volumes:
          - name: ldap-conf
            configMap:
              name: ldap-conf