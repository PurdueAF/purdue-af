apiVersion: batch/v1
kind: CronJob
metadata:
  name: jupyterhub-database-backup
spec:
  schedule: "0 0,12 * * *" # Run at midnight and noon every day
  suspend: false
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: database-backup
          securityContext:
            runAsUser: 616617
          nodeSelector: { "cms-af-prod": "true" }
          tolerations:
            - key: "hub.jupyter.org/dedicated"
              operator: "Equal"
              value: "cms-af"
              effect: "NoSchedule"
          containers:
            - name: database-backup
              image: alpine/kubectl:1.34.1
              securityContext:
                runAsUser: 616617
              command:
                - /bin/sh
                - -c
                - |
                  # Get current timestamp for filename
                  if [ "$(date +%H)" -lt 12 ]; then
                    TIMESTAMP="midnight"
                  else
                    TIMESTAMP="noon"
                  fi

                  YEAR=$(date +%Y)
                  MONTH=$(date +%b | tr '[:upper:]' '[:lower:]')
                  DAY=$(date +%d)
                  BACKUP_FILENAME="jupyterhub-${YEAR}${MONTH}${DAY}-${TIMESTAMP}.sqlite"
                  BACKUP_PATH="/depot/cms/purdue-af/backups/${BACKUP_FILENAME}"

                  echo "Starting database backup at $(date)"
                  echo "Backup filename: ${BACKUP_FILENAME}"

                  # Find the JupyterHub hub pod
                  HUB_POD=$(kubectl get pods -n cms -l app=jupyterhub,component=hub -o jsonpath='{.items[0].metadata.name}')

                  if [ -z "$HUB_POD" ]; then
                    echo "ERROR: Could not find JupyterHub hub pod"
                    exit 1
                  fi

                  echo "Found hub pod: ${HUB_POD}"

                  # Create backup directory if it doesn't exist
                  mkdir -p /depot/cms/purdue-af/backups

                  # Copy the database file from the pod
                  echo "Copying database from pod..."
                  kubectl cp cms/${HUB_POD}:/srv/jupyterhub/jupyterhub.sqlite ${BACKUP_PATH}

                  if [ $? -eq 0 ]; then
                    # Check if the backup file exists and has content
                    if [ -f "${BACKUP_PATH}" ] && [ -s "${BACKUP_PATH}" ]; then
                      echo "Database backup completed successfully: ${BACKUP_PATH}"
                      
                      # Keep only the last 5 backups
                      echo "Cleaning up old backups (keeping last 5)..."
                      cd /depot/cms/purdue-af/backups
                      ls -t jupyterhub-*.sqlite | tail -n +6 | xargs -r rm -f
                      
                      echo "Backup cleanup completed"
                      echo "Current backups:"
                      ls -la jupyterhub-*.sqlite 2>/dev/null || echo "No backups found"
                    else
                      echo "WARNING: Database file is empty or does not exist, removing backup file"
                      rm -f "${BACKUP_PATH}"
                      exit 0
                    fi
                  else
                    echo "ERROR: Failed to copy database from pod"
                    exit 1
                  fi

                  echo "Database backup job completed at $(date)"
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"
              volumeMounts:
                - name: depot
                  mountPath: /depot/cms
                  mountPropagation: HostToContainer
          restartPolicy: OnFailure
          volumes:
            - name: depot
              nfs:
                server: datadepot.rcac.purdue.edu
                path: /depot/cms
